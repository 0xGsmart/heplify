#!KAMAILIO

/* Parameters for Homer */
#!substdef "!HOMER_DB_USER!homer_user!g"
#!substdef "!HOMER_DB_PASSWORD!homer_password!g"
#!substdef "!HOMER_DB_HOST!127.0.0.1!g"
#!substdef "!HOMER_DB_PORT!3306!g"
#!substdef "!HOMER_LISTEN_PROTO!udp!g"
#!substdef "!HOMER_LISTEN_IF!0.0.0.0!g"
#!substdef "!HOMER_LISTEN_PORT!9060!g"

/* Parameters for the rtimer module */
#!substdef "!CHECK_STATS_INTERVAL!1!g"

/* Parameters for Elasticsearch */
#!substdef "!ELASTICSEARCH_HTTP_URL!http://127.0.0.1:9200!g"

/* Parameters for Graylog */
#!substdef "!GRAYLOG_GELF_HTTP_URL!http://127.0.0.1:12201!g"

/* Parameters for InfluxDB */
#!substdef "!INFLUXDB_HTTP_URL!http://127.0.0.1:8086!g"
#!substdef "!INFLUXDB_DB!homer!g"
#!substdef "!INFLUXDB_MEASUREMENT!homer_stats!g"
#!substdef "!INFLUXDB_PRECISION!u!g"
#!substdef "!INFLUXDB_RETENTION!autogen!g"


/* Global parameters starts here */
##!define GEO
##!define TO_ELASTIC
#!define TO_GRAYLOG
#!define TO_INFLUXDB
#!define XRTP

listen=HOMER_LISTEN_PROTO:HOMER_LISTEN_IF:HOMER_LISTEN_PORT
disable_tcp=yes
debug=1
log_stderror=no
log_facility=LOG_LOCAL1
memdbg=5
memlog=5
maxbuffer=134190336
fork=yes
children=4
max_while_loops=2048
mpath="/usr/lib/x86_64-linux-gnu/kamailio/modules/"

/* Load all the modules we need here */
loadmodule "pv.so"
loadmodule "db_mysql.so"
loadmodule "sipcapture.so"
loadmodule "textops.so"
loadmodule "rtimer.so"
loadmodule "xlog.so"
loadmodule "sqlops.so"
loadmodule "htable.so"
loadmodule "tm.so"
loadmodule "sl.so"
loadmodule "siputils.so"
loadmodule "jansson.so"
loadmodule "ipops.so"
loadmodule "ctl.so"
loadmodule "kex.so"
loadmodule "http_client.so"
#loadmodule "http_async_client.so"

#!ifdef GEO
loadmodule "geoip.so"
#!endif

/* Configure htable module */
modparam("htable", "htable", "sipDedupMap=>size=18;autoexpire=300")
modparam("htable", "htable", "statDedupMap=>size=18;autoexpire=300")
modparam("htable", "htable", "estCalls=>size=10")
modparam("htable", "htable", "allInv=>size=8")
modparam("htable", "htable", "geoMap=>size=8")
modparam("htable", "htable", "allBye=>size=8")
modparam("htable", "htable", "k=>size=8")
modparam("htable", "htable", "m=>size=8")
modparam("htable", "htable", "n=>size=8")
modparam("htable", "htable", "r=>size=8")
modparam("htable", "htable", "w=>size=12;autoexpire=60")
#!ifdef XRTP
modparam("htable", "htable", "xRtpMap=>size=10;autoexpire=5")
#!endif
modparam("htable", "htable", "y=>size=16;autoexpire=5")
modparam("htable", "htable", "z=>size=16;autoexpire=5")
modparam("htable", "timer_interval", 5)

/* Configure rtimer module */
modparam("rtimer", "timer", "name=stats_timer;interval=CHECK_STATS_INTERVAL;mode=1;")
modparam("rtimer", "exec", "timer=stats_timer;route=CHECK_STATS")

/* Configure sqlops module */
modparam("sqlops","sqlcon","cb=>mysql://HOMER_DB_USER:HOMER_DB_PASSWORD@HOMER_DB_HOST:HOMER_DB_PORT/homer_statistic")
modparam("sqlops","sqlcon","wc=>mysql://HOMER_DB_USER:HOMER_DB_PASSWORD@HOMER_DB_HOST:HOMER_DB_PORT/homer_data")

/* Configure sipcapture module */
modparam("sipcapture", "db_url", "mysql://HOMER_DB_USER:HOMER_DB_PASSWORD@HOMER_DB_HOST:HOMER_DB_PORT/homer_data")
modparam("sipcapture", "capture_on", 1)
modparam("sipcapture", "hep_capture_on", 1)
modparam("sipcapture", "insert_retries", 5)
modparam("sipcapture", "insert_retry_timeout", 5)
modparam("sipcapture", "capture_node", "homer01")
modparam("sipcapture", "nonsip_hook", 1)

/* Configure http_async_client module */
#modparam("http_async_client", "workers", 8)
#modparam("http_async_client", "hash_size", 8192)

/* Configure http_client module */
modparam("http_client", "httpcon", "elasticsearchServer=>ELASTICSEARCH_HTTP_URL");
modparam("http_client", "httpcon", "graylogServer=>GRAYLOG_GELF_HTTP_URL");
modparam("http_client", "httpcon", "influxServer=>INFLUXDB_HTTP_URL");

#!ifdef GEO
/* Configure geoip module */
modparam("geoip", "path", "/usr/share/GeoIP/GeoLiteCity.dat")
#!endif

/* Include the routing blocks you need here */
##############################################

include_file "/etc/kamailio/event_route_sipcapture.cfg"
#!ifdef GEO
include_file "/etc/kamailio/geo.cfg"
#!endif
#!ifdef XRTP
include_file "/etc/kamailio/xrtp.cfg"
#!endif

##############################################

/* Main SIP request routing logic - processing of any incoming SIP request starts with this route */
route {
	/* Avoid double messages. This could happen if you have many optical taps */
	if($sht(sipDedupMap=>$sel(@v[1].host)::$sel(@v[1].branch)::$ci::$cs::$rm)) drop;
	$sht(sipDedupMap=>$sel(@v[1].host)::$sel(@v[1].branch)::$ci::$cs::$rm) = 1;

	/* Drop second request with same CallID and CSeq for stats but store all in DB */
	if($sht(statDedupMap=>$rm::$cs::$ci) != $null) {
		route(STORE);
		drop;
	}
	$sht(statDedupMap=>$rm::$cs::$ci) = 1;

	/* Add your custom routes which process requests in realtime here */
	#################################################################

	#!ifdef GEO
	route(GEO);
	#!endif

	#!ifdef XRTP
	route(XRTP_REALTIME_STATS);
	#!endif

	#################################################################

	/* Store the requests */
	route(STORE);
	drop;
}

onreply_route {
	/* Avoid double messages. This could happen if you have many optical taps */
	if($sht(sipDedupMap=>$sel(@v[1].host)::$sel(@v[1].branch)::$ci::$cs::$rs)) drop;
	$sht(sipDedupMap=>$sel(@v[1].host)::$sel(@v[1].branch)::$ci::$cs::$rs) = 1;

	/* Drop second response with same CallID and CSeq for stats but store all in DB */
	if($sht(statDedupMap=>$rs::$cs::$rm::$ci) != $null) {
		route(STORE);
		drop;
	}
	$sht(statDedupMap=>$rs::$cs::$rm::$ci) = 1;

	/* Add your custom routes which process responses in realtime here */
	##################################################################

	#!ifdef XRTP
	route(XRTP_REALTIME_STATS);
	#!endif

	##################################################################

	/* Store the responses */
	route(STORE);
	drop;
}

route[CHECK_STATS] {
	$var(host) = $HN(n);
	$var(influxdb_host) = "host=" + $var(host);

	$var(curtime) = $TS;
	$var(gentime) = $var(curtime) - CHECK_TIMER_INTERVAL;
	$var(urtime) = $TS+$TV(u);

	$var(t_mdate) = "FROM_UNIXTIME(" + $var(curtime) + ", '%Y-%m-%d %H:%i:00')";
	$var(f_mdate) = "FROM_UNIXTIME(" + $var(gentime) + ", '%Y-%m-%d %H:%i:00')";

	$var(isotime) = $timef(%Y-%m-%dT%TZ);
	
	/* Add your custom routes which periodically generate stats from maps here */
	#############################################################################

	#!ifdef GEO
	route(GEO_MAP_STATS);
	#!endif

	#############################################################################
}

route[STORE] {
	if($rm == "REGISTER") {
		$var(table) = "sip_capture_registration";
	}
	else if($rm =~ "(INVITE|UPDATE|BYE|ACK|PRACK|REFER|CANCEL)$") {
		$var(table) = "sip_capture_call";
	}
	else if($rm =~ "(NOTIFY)$" && is_present_hf("Event") && $hdr(Event)=~"refer;") {
		$var(table) = "sip_capture_call";
	}
	else if($rm =~ "(INFO)$") {
		$var(table) = "sip_capture_call";
	}
	else if($rm =~ "(OPTIONS)$" ) {
		$var(table) = "sip_capture_rest";
	}
	else {
		$var(table) = "sip_capture_rest";
	}

	/* Append the current day timestamp to the tables */
	$var(utc) = $utimef(%Y%m%d);
	$var(a) = $var(table) + "_" + $var(utc);
	sip_capture("$var(a)");
}
